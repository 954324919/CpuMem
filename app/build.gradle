apply plugin: 'com.android.application'
apply plugin:'jacoco'
apply plugin:'checkstyle'
apply plugin:'findbugs'
android {
    compileSdkVersion 24
    buildToolsVersion "23.0.3"

    lintOptions{
        //true  关闭lint报告的分析进度
        //quit true
        //设置编译的lint开关，程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建
        abortOnError false
        // true--只报告error
        //ignoreWarnings true
        // true--忽略有错误的文件的全/绝对路径(默认是true)
        //absolutePaths true
        // true--检查所有问题点，包含其他默认关闭项
        //checkAllWarnings true
        // true--所有warning当做error
        //warningsAsErrors true
        // 关闭指定问题检查
        //disable 'TypographyFractions', 'TypographyQuotes'
        // 打开指定问题检查
        //enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // 仅检查指定问题
        //check 'NewApi', 'InlinedApi'
        // true--error输出文件不包含源码行号
        //noLines true
        // true--显示错误的所有发生位置，不截取
        //showAll true
        // 回退lint设置(默认规则)   进行自定义lint规则
        //lintConfig file("default-lint.xml")
        // true--生成txt格式报告(默认false)
        //textReport true
        // 重定向输出；可以是文件或'stdout'
        //textOutput 'stdout'
        // true--生成XML格式报告
        //xmlReport false
        // 指定xml报告文档(默认lint-results.xml)
        //xmlOutput file("lint-report.xml")
        // true--生成HTML报告(带问题解释，源码位置，等)
        htmlReport true
        // html报告可选路径(构建器默认是lint-results.html )
        htmlOutput file("lint-report.html")
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        //checkReleaseBuilds true
        // 在发布版本编译时检查(即使不包含lint目标)，指定问题的规则生成崩溃
        //fatal 'NewApi', 'InlineApi'
        // 指定问题的规则生成错误
        //error 'Wakelock', 'TextViewEdits'
        // 指定问题的规则生成警告
        //warning 'ResourceAsColor'
        // 忽略指定问题的规则(同关闭检查)
        //ignore 'TypographyQuotes'
    }
    task('findbugs',type: FindBugs,dependsOn:"assembleDebug"){
        classes = fileTree('build/intermediates/classes/debug')
        source = fileTree('src/main/java/')
        classpath = files()
        effort = 'max'
        reports {
            xml.enabled false
            html.enabled true
            if(html.enabled){
                html{destination "$project.buildDir/findbugs/findBugsReport.html"}
            }
            //html.stylesheet resources.text.fromFile('findbugs-template.xsl')
        }
    }
    task('checkstyle', type: Checkstyle) {
        source 'src/main/java'
        include '**/*.java'
        exclude '**/R.java'
        exclude '**/BuildConfig.java'
        classpath = files()
    }
    defaultConfig {
        applicationId "com.example.administrator.cpumem"
        minSdkVersion 17
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            /*打开覆盖率统计开关*/
            testCoverageEnabled=true
            debuggable true
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    compile 'com.github.dfqin:grantor:2.1.0'
    //增加对卡顿检测的依赖
    compile 'com.github.markzhai:blockcanary-android:1.5.0'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
}
